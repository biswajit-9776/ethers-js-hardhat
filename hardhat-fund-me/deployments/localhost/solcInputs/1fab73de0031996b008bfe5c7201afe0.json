{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"./PriceConverter.sol\";\n\ncontract FundMe {\n    using PriceConverter for uint256;\n\n    AggregatorV3Interface public priceFeed;\n    address public immutable i_owner;\n    address[] public fundedList;\n    uint256 public constant USD_MINIMUM = 50 * 1e18;\n\n    constructor(address prideFeedAddress) {\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(prideFeedAddress);\n    }\n\n    function fund() public payable {\n        require(\n            msg.value.getConversionRate(priceFeed) >= USD_MINIMUM,\n            \"Not enough funds\"\n        );\n        fundedList.push(msg.sender);\n    }\n\n    function withdraw() public onlyOwner {\n        // payable(msg.sender).transfer(address(this).balance);\n\n        // bool success = payable(msg.sender).send(address(this).balance);\n        // require(success, \"Unable to withdraw funds\");\n\n        (bool sendSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(sendSuccess, \"Error occured in withdrawing funds\");\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == i_owner, \"Only owner can withdraw\");\n        _;\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getVersion() internal view returns (uint256) {\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\n            0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\n        );\n        return priceFeed.version();\n    }\n\n    function getConversionRate(\n        uint256 value,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 price = getPrice(priceFeed);\n        return (price * value) / 1e18;\n    }\n\n    function getPrice(\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n        return uint256(price * 1e10);\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}