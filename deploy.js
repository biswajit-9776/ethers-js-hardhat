const ethers = require("ethers");
const fs = require("fs-extra");
require("dotenv").config()

async function main() {
  let provider = new ethers.JsonRpcProvider("http://127.0.0.1:7545");
  // let wallet = new ethers.Wallet(
  //   "0x0a3c099f5300b41079e234903e30ca6a1022ba774086ae1b16480e0c00d06457",
  //   provider
  // );

  const encryptedJson = fs.readFileSync("./.encryptedKey.json", "utf8");
  let wallet = ethers.Wallet.fromEncryptedJsonSync(
    encryptedJson,
    process.env.PRIVATE_KEY_PASSWORD
  );
  wallet = wallet.connect(provider);
  let abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf8");
  let binary = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.bin", "utf8");
  const contractFactory = new ethers.ContractFactory(abi, binary, wallet);

  // Deploy the contrract and retrieve the contract transaction response and receipt
  console.log("Deploying Contract, please wait...");
  const contract = await contractFactory.deploy();
  // console.log(contract);

  // const transactionReceipt = await contract.deploymentTransaction().wait(1);
  // console.log("Here is the deployment transaction(transaction response): ");
  // console.log(contract.deploymentTransaction());

  // console.log("Here is the transaction receipt: ");
  // console.log(transactionReceipt);

  // Send a transaction just using ethers-js
  // nonce = await wallet.getNonce();
  // let tx = {
  //   nonce: nonce,
  //   to: null,
  //   value: 0,
  //   data: "0x608060405234801561001057600080fd5b50610717806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632e64cec1146100465780636057361d146100645780636f760f4114610080575b600080fd5b61004e61009c565b60405161005b9190610151565b60405180910390f35b61007e600480360381019061007991906101ac565b6100a5565b005b61009a6004803603810190610095919061031f565b6100af565b005b60008054905090565b8060008190555050565b6002604051806040016040528083815260200184815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000155602082015181600101908161010e9190610592565b5050508060018360405161012291906106ca565b9081526020016040518091039020819055505050565b6000819050919050565b61014b81610138565b82525050565b60006020820190506101666000830184610142565b92915050565b6000604051905090565b600080fd5b600080fd5b61018981610138565b811461019457600080fd5b50565b6000813590506101a681610180565b92915050565b6000602082840312156101c2576101c1610176565b5b60006101d084828501610197565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61022c826101e3565b810181811067ffffffffffffffff8211171561024b5761024a6101f4565b5b80604052505050565b600061025e61016c565b905061026a8282610223565b919050565b600067ffffffffffffffff82111561028a576102896101f4565b5b610293826101e3565b9050602081019050919050565b82818337600083830152505050565b60006102c26102bd8461026f565b610254565b9050828152602081018484840111156102de576102dd6101de565b5b6102e98482856102a0565b509392505050565b600082601f830112610306576103056101d9565b5b81356103168482602086016102af565b91505092915050565b6000806040838503121561033657610335610176565b5b600083013567ffffffffffffffff8111156103545761035361017b565b5b610360858286016102f1565b925050602061037185828601610197565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806103cd57607f821691505b6020821081036103e0576103df610386565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026104487fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261040b565b610452868361040b565b95508019841693508086168417925050509392505050565b6000819050919050565b600061048f61048a61048584610138565b61046a565b610138565b9050919050565b6000819050919050565b6104a983610474565b6104bd6104b582610496565b848454610418565b825550505050565b600090565b6104d26104c5565b6104dd8184846104a0565b505050565b5b81811015610501576104f66000826104ca565b6001810190506104e3565b5050565b601f82111561054657610517816103e6565b610520846103fb565b8101602085101561052f578190505b61054361053b856103fb565b8301826104e2565b50505b505050565b600082821c905092915050565b60006105696000198460080261054b565b1980831691505092915050565b60006105828383610558565b9150826002028217905092915050565b61059b8261037b565b67ffffffffffffffff8111156105b4576105b36101f4565b5b6105be82546103b5565b6105c9828285610505565b600060209050601f8311600181146105fc57600084156105ea578287015190505b6105f48582610576565b86555061065c565b601f19841661060a866103e6565b60005b828110156106325784890151825560018201915060208501945060208101905061060d565b8683101561064f578489015161064b601f891682610558565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b60005b8381101561068d578082015181840152602081019050610672565b60008484015250505050565b60006106a48261037b565b6106ae8185610664565b93506106be81856020860161066f565b80840191505092915050565b60006106d68284610699565b91508190509291505056fea2646970667358221220242424f8f5ad4ca459e572a59831aef18a4bcbadf99e3df2f904b25e2af397f664736f6c63430008130033",
  //   chainId: 1337,
  // };

  // const signedTransaction = await wallet.signTransaction(tx);
  // console.log(signedTransaction);

  // const sendTransaction = await wallet.sendTransaction(tx);
  // await sendTransaction.wait(1);
  // console.log(sendTransaction);

  const favourtiteNumber = await contract.retrieve();
  console.log(`Current favorite number is ${favourtiteNumber.toString()}`);
  const transactionResponse = await contract.store(7);
  await transactionResponse.wait(1);
  updatedFavoriteNiumber = await contract.retrieve();
  console.log(`Current favorite number is ${updatedFavoriteNiumber}`);
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
